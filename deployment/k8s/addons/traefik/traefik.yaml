kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ (datasource "config").name }}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: {{ (datasource "config").name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ (datasource "config").name }}
subjects:
- kind: ServiceAccount
  name: {{ (datasource "config").name }}
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ (datasource "config").name }}
  namespace: kube-system
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: {{ (datasource "config").name }}
  namespace: kube-system
  labels:
    k8s-app: {{ (datasource "config").name }}
spec:
  replicas: {{ (datasource "config").replicas }}
  selector:
    matchLabels:
      k8s-app: {{ (datasource "config").name }}
  template:
    metadata:
      labels:
        k8s-app: {{ (datasource "config").name }}
        name: {{ (datasource "config").name }}
    spec:
      serviceAccountName: {{ (datasource "config").name }}
      terminationGracePeriodSeconds: 60
{{- if has (datasource "config") "nodeSelector" }}
      nodeSelector:
{{ (datasource "config").nodeSelector | toYAML | strings.Indent 8 }}
{{- end }}
      containers:
      - image: {{ (datasource "config").image }}
        name: {{ (datasource "config").name }}
        resources:
          limits:
            cpu: 200m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
        ports:
        - containerPort: 80
        - containerPort: 8080
        args:
        - --web
        - --kubernetes
---
apiVersion: v1
kind: Service
metadata:
  name: {{ (datasource "config").name }}
  namespace: kube-system
spec:
  type: NodePort
  ports:
  - port: 80
    targetPort: 80
    nodePort: {{ (datasource "config").nodePort }}
  selector:
    k8s-app: {{ (datasource "config").name }}
---
apiVersion: v1
kind: Service
metadata:
  name: traefik-web-ui
  namespace: kube-system
spec:
  selector:
    k8s-app: {{ (datasource "config").name }}
  ports:
  - port: 80
    targetPort: 8080
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: traefik-haystack
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: {{ (datasource "config").hostName }}
    http:
      paths:
       - path: /
         backend:
           serviceName: traefik-web-ui
           servicePort: 80
       - path: /dashboard/
         backend:
           serviceName: traefik-web-ui
           servicePort: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: traefik-haystack-grafana
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefixStrip
spec:
  rules:
   - host: {{ (datasource "config").hostName }}
     http:
        paths:
         - path: /grafana
           backend:
             serviceName: monitoring-grafana
             servicePort: 80
